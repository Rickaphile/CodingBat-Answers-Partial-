//Consider the leftmost and righmost appearances of some value in an array. We'll say that the "span" is the number of elements between the two inclusive. A single value has a span of 1. Returns the largest span found in the given array. (Efficiency is not a priority.)

public int maxSpan(int[] nums) {
  int c1 = 1;
  int c2 = 0;
  for (int i = 0; i < nums.length; i++) {
    for (int j = nums.length - 1; j > i; j--) {
      if (nums[j] == nums[i]) {
        c1 = j - i + 1;
        break;
      }
    }
    if (c1 > c2) {
      c2 = c1;
      c1 = 1;
    }
  }
  
  return c2;
}


//Return an array that contains exactly the same numbers as the given array, but rearranged so that every 3 is immediately followed by a 4. Do not move the 3's, but every other number may move. The array contains the same number of 3's and 4's, every 3 has a number after it that is not a 3, and a 3 appears in the array before any 4.

public int[] fix34(int[] nums) {
  int[] n2 = new int[nums.length];
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] == 3) {
      n2[i] = 3;
      n2[i + 1] = 4;
    }
  }
  
  int count = 0;
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] != 3 && nums[i] != 4) {
      for (int j = count; j < n2.length; j++) {
        if (n2[j] != 3 && n2[j] != 4) {
          n2[j] = nums[i];
          count = j + 1;
          break;
        }
      }
    }
  }
  
  return n2;
}


//Return an array that contains exactly the same numbers as the given array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array.

public int[] fix45(int[] nums) {
  int[] n2 = new int[nums.length];
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] == 4) {
      n2[i] = 4;
      n2[i + 1] = 5;
    }
  }
  
  int count = 0;
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] != 4 && nums[i] != 5) {
      for (int j = count; j < n2.length; j++) {
        if (n2[j] != 4 && n2[j] != 5) {
          n2[j] = nums[i];
          count = j + 1;
          break;
        }
      }
    }
  }
  
  return n2;
}


//Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.

public boolean canBalance(int[] nums) {
  int s1 = 0;
  int s2 = 0;
  for (int i = 0; i < nums.length; i++) {
    s1 += nums[i];
    for (int j = nums.length - 1; j > i; j--) {
      s2 += nums[j];
    }
    if (s2 == s1) {
      return true;
    }
    s2 = 0;
  }
  
  return false;
}


//Given two arrays of ints sorted in increasing order, outer and inner, return true if all of the numbers in inner appear in outer. The best solution makes only a single "linear" pass of both arrays, taking advantage of the fact that both arrays are already in sorted order.

public boolean linearIn(int[] outer, int[] inner) {
  boolean check = false;
  
  if (inner.length == 0) {
    return true;
  }
  
  for (int i = 0; i < inner.length; i++) {
    for (int j = 0; j < outer.length; j++) {
      if (outer[j] == inner[i]) {
        check = true;
        break;
      } else {
        check = false;
        if (j == outer.length - 1) {
          return false;
        }
      }
    }
  }
  
  return check;
}


//Given n>=0, create an array length n*n with the following pattern, shown here for n=3 : {0, 0, 1,    0, 2, 1,    3, 2, 1} (spaces added to show the 3 groups).

public int[] squareUp(int n) {
  int[] n1 = new int[n * n];
  int count = 0;
  int c2 = 0;
  for (int i = 0; i < n; i++) {
    int num = 1;
    for (int j = n * count + n - 1; j >= n * count; j--) {
      if (c2 >= 0) {
        n1[j] = num;
        num++;
        c2--;
      }
    }
    count++;
    c2 += num;
  }
  
  return n1;
}


//Given n>=0, create an array with the pattern {1,    1, 2,    1, 2, 3,   ... 1, 2, 3 .. n} (spaces added to show the grouping). Note that the length of the array will be 1 + 2 + 3 ... + n, which is known to sum to exactly n*(n + 1)/2.

public int[] seriesUp(int n) {
  int[] n1 = new int[n * (n + 1) / 2];
  int count = 0;
  for (int i = 0; i < n; i++) {
    int num = 1;
    for (int j = count; j < count + i + 1; j++) {
      n1[j] = num;
      num++;
    }
    count += i + 1;
  }
  
  return n1;
}


//We'll say that a "mirror" section in an array is a group of contiguous elements such that somewhere in the array, the same group appears in reverse order. For example, the largest mirror section in {1, 2, 3, 8, 9, 3, 2, 1} is length 3 (the {1, 2, 3} part). Return the size of the largest mirror section found in the given array.

public int maxMirror(int[] nums) {
	int len;
  int l2 = 0;
  int left;
  int right;
  
  for (int i = 0; i < nums.length; i++) {
    left = i;
    right = lastIndexOf(nums, nums[i], nums.length - 1);
    
    while(right != -1) {
      left = i;
      len = 0;
      do {
        left++;
        right--;
        len++;
      } while (left < nums.length && right >= 0 && nums[left] == nums[right]);
      if (len > l2) {
        l2 = len;
      }
      right = lastIndexOf(nums, nums[i], right);
    }
  }
  
  return l2;
}

//The helping method for maxMirror
public int lastIndexOf(int[] nums, int value, int index) {
  for(; index >= 0; index--) {
    if (nums[index] == value) {
      return index;
    }
  }
  
  return -1;
}


//Say that a "clump" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.

public int countClumps(int[] nums) {
  int num = 0;
  for (int i = 0; i < nums.length - 1; i++) {
    if (nums[i] == nums[i + 1]) {
      num++;
      if (i + 2 < nums.length && nums[i + 1] == nums[i + 2]) {
        num--;
      }
    }
  }
    
  return num;
}
